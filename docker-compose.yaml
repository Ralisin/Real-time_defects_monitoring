version: '3.8'

services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
#    volumes:
#      - kafka_data:/bitnami/kafka
    networks:
      - flink-network

  kafka-init:
    image: bitnami/kafka:latest
    depends_on:
      - kafka
    entrypoint: [ "sh", "-c" ]
    command: |
      "
      echo 'Waiting for Kafka to be ready...' &&
      kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1
      until [ $? -eq 0 ]; do
        sleep 2
        kafka-topics.sh --bootstrap-server kafka:9092 --list > /dev/null 2>&1
      done
      echo 'Creating topic raw-batch and results...' &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic raw-batch --partitions 1 --replication-factor 1 &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic results --partitions 1 --replication-factor 1 &&
      echo 'Creating topic saturated-pixels...' &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic saturated-pixels --partitions 1 --replication-factor 1 &&
      echo 'Creating topic saturated-rank...' &&
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic saturated-rank --partitions 1 --replication-factor 1
      echo 'DONE.'
      "
    networks:
      - flink-network

  flink-jobmanager:
    build:
      context: ./flink-python
      dockerfile: Dockerfile
    image: custom-flink:latest
    container_name: flink-jobmanager
    command: jobmanager
    ports:
      - "8081:8081"
    environment:
      - PYTHONPATH=/opt
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FLINK_PROPERTIES=jobmanager.rpc.address:flink-jobmanager
    volumes:
      - ./flink-python/flink_raw_batch_job.py:/opt/flink_job.py:ro
      - ./flink-python/Q1.py:/opt/Q1.py
      - ./flink-python/Q2.py:/opt/Q2.py
    networks:
      - flink-network

  flink-taskmanager:
    image: custom-flink:latest
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address:flink-jobmanager
        taskmanager.numberOfTaskSlots:8
        taskmanager.memory.process.size:8096mb
        taskmanager.memory.task.off-heap.size:1024mb
        taskmanager.memory.framework.off-heap.size:512mb
      - VERBOSE=0
    networks:
      - flink-network
    deploy:
      replicas: 1

  middleware:
    build:
      context: ./middleware
      dockerfile: Dockerfile
    image: middleware:latest
    container_name: middleware
    depends_on:
      - kafka
      - local-challenger
    volumes:
      - ./middleware/middleware.py:/app/middleware.py
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - CHALLENGER_URL=http://local-challenger:8866
      - VERBOSE=1 # Add more middleware logs but increase middleware job weight
      - INTERVAL=1 # Time through every new message in the 'raw-batch' topic
#      - LIMIT=20 # A limit can be set via environment
    networks:
      - flink-network

  local-challenger:
    image: micro-challenger:latest
    container_name: local-challenger
    command: ["0.0.0.0:8866", "/data"]
    ports:
      - "8866:8866"
    volumes:
      - ./local-challenger/data:/data
    networks:
      - flink-network

volumes:
  kafka_data:

networks:
  flink-network:
    driver: bridge
